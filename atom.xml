<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cacivy</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/Cacivy/"/>
  <updated>2019-05-04T05:11:14.228Z</updated>
  <id>https://github.com/Cacivy/</id>
  
  <author>
    <name>Cacivy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>五一前千岛湖骑行</title>
    <link href="https://github.com/Cacivy/2019/05/04/%E5%8D%83%E5%B2%9B%E6%B9%96%E9%AA%91%E8%A1%8C/"/>
    <id>https://github.com/Cacivy/2019/05/04/千岛湖骑行/</id>
    <published>2019-05-04T00:00:00.000Z</published>
    <updated>2019-05-04T05:11:14.228Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/千岛湖题图.jpg" alt></p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p>其实有段时间没骑行了，五一没有打算出去玩<br>然而剩下两天调休，于是今年计划之一的千岛湖骑行就提上日程了</p><a id="more"></a><h2 id="出行前准备"><a href="#出行前准备" class="headerlink" title="出行前准备"></a>出行前准备</h2><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><ul><li>4-29</li><li>4-30</li></ul><p>完美错开五一高峰期，而且酒店也比较好(pianyi)订(yi)，选择了离千岛湖大桥不远的酒店<br>然而天气不太美好，决定先计划，实在不行就雨中骑行嘛，也不是没干过</p><h3 id="交通"><a href="#交通" class="headerlink" title="交通"></a>交通</h3><p>来回高铁，行程1小时，最后临时换了一等座，原因后面说</p><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>淘宝买了自行车打包袋，拆下前后轮、座管就好了，车把因为螺丝被我拧花了，车店也没得换就这样了，而且还可以作为一个抓手用来拖车(车袋一侧有两个滑轮)<br>整体重量差不多25斤左右，车身15斤，大部分时间是拖着，提的话还是比较累<br><img src="/images/车袋.jpg" alt><br>其它包括头盔、骑行服、工具等等<br>设备列表</p><ul><li>garmin edge520</li><li>garmin 心率带</li><li>gopro HERO6</li><li>SHIMANO RC7锁鞋</li><li>Under Armour Trace背包</li></ul><h2 id="启程"><a href="#启程" class="headerlink" title="启程"></a>启程</h2><p>因为怕这么大袋子安检不让过，或者五一人多等原因，提前2小时出发，到了后畅通无阻，于是在车站等了一个小时<br>对了，打包袋普通三厢车后备箱放不下，所以放在第二排座椅上<br>检票上车都很顺利，之前换一等座的原因是在车厢后面有很宽敞的位置可以放车<br><img src="/images/高铁车袋.jpg" alt></p><h2 id="到达目的地-第一天"><a href="#到达目的地-第一天" class="headerlink" title="到达目的地(第一天)"></a>到达目的地(第一天)</h2><p>直接打车到酒店，同样放第二排<br>千岛湖高铁站离县城还是比较远的，但是路况很好，而且刚刚下完雨，空气特别好，风景美的不像话。望着窗外，已经按捺不住要马上去骑车的冲动了<br>因为订的是湖景房，酒店可以直接看到千岛湖，题图就是在酒店阳台拍的，楼层高的话风景会更好<br>这里还有个小惊喜，酒店特别棒，价格是500/2晚，房间很大40m²左右，以及很大的浴缸。不过独自享受有点浪费的感觉<br>迫不及待把车装好后，就去千岛湖大桥转了一圈，桥上风景绝美，然而一侧路况不太好，而且保留明天的体力所以没多久就回来了</p><h2 id="骑行-第二天"><a href="#骑行-第二天" class="headerlink" title="骑行(第二天)"></a>骑行(第二天)</h2><p>早上7点就起来了，然后在酒店吃过早餐<br>果然是阴雨天，而且小雨还在下，还好早有准备，带了薄外套和跑步压缩裤以及面巾，其实就算不下雨也要带的，因为下坡的时候风打在身上会非常凉</p><h3 id="出发"><a href="#出发" class="headerlink" title="出发"></a>出发</h3><ul><li>过了淳安县城，开始担心会走错路，发现全程绿道，这点真的很好，而且伴着小雨有种别样的感觉</li><li>20km，28-30巡航，状态很好，开始担心会走错路，过了县城后发现担心完全是多余的，全程绿道，和机动车分开，路况也很好。这是基本</li><li>60km，24-26巡航，经过了数座大桥、沿湖路、山中栈道(下雨真的很滑)，觉得真的是来对地方了，风景还有骑行体验巨好。而且隧道都是绕行过去，穿梭在山林之间</li><li>80km，已经有点累了，爬过了几个大坡，补给了能量胶，继续爬坡</li><li>100km，22-24巡航，这段基本是沿着公路两旁的非机动车道骑行，而且发现了一个当天唯一一个骑友</li><li>120km，隧道太多了，而且路况很差，隧道内根本骑不动，大腿很酸，拉伸了下。而且提前点了个外卖送到酒店</li><li>130km，终于到了千岛湖大桥，可以吃午饭了<br>因为天气的原因，全程心率很低，平均只有157。而且只带了两瓶水，途中没有补给，过半的时候吃了个面包，后面补充了两个能量胶<br>前70km路况非常好，后面有绿道不全、隧道等问题，但总体还是很棒，而且爬坡也够<br>回酒店后吃过午饭，泡了个澡，躺床上休息了一下午，直到天黑，买了个小西瓜🍉，然后继续按摩放松。腿倒没有很酸，右侧肩膀很酸痛，怀疑是因为抗车袋，因为昨天就有点，加上骑行姿势可能加重了<br>后面想想这天气骑行非常好，景色怡人，也不用汗如雨下，然后不停补水。唯一的缺点就是山道有点滑，而且下雨会很多小石子，泥水打在车上，后面链条已经有异响了，速度也受到一点影响</li></ul><h3 id="视频参上"><a href="#视频参上" class="headerlink" title="视频参上"></a><a href="https://www.bilibili.com/video/av51098617/" target="_blank" rel="noopener">视频参上</a></h3><iframe src="//player.bilibili.com/player.html?aid=51098617&cid=89464412&page=1" scrolling="no" border="1" frameborder="no" style="width: 100%;height: 500px;" framespacing="0" allowfullscreen="true"> </iframe><h3 id="Relive"><a href="#Relive" class="headerlink" title="Relive"></a>Relive</h3><iframe src="//player.bilibili.com/player.html?aid=51094325&cid=89457257&page=1" scrolling="no" style="width: 100%;height: 500px;" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h3 id="Strava"><a href="#Strava" class="headerlink" title="Strava"></a>Strava</h3><iframe height="405" width="590" frameborder="0" allowtransparency="true" scrolling="no" src="https://www.strava.com/activities/2329811191/embed/07874437f4556d5f10975dc5ad7baf137ce45197"></iframe><h2 id="归途"><a href="#归途" class="headerlink" title="归途"></a>归途</h2><p>日常早起，因为不拉窗帘，醒来就可以看到湖面和远处的天空<br>吃过早饭，约好返程去高铁站的车后，还有2小时，开始探险时间了<br><img src="/images/林中石道.jpg" alt></p><p>经过一条林间石道后来到了湖边，能够感受到湖水拍打在岸边，有人垂钓、也有小孩嬉戏<br>就这样静静的感受时间，顺便记录点什么<br><img src="/images/慢时光.jpg" alt></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><ul><li>5.12有70km竞赛，明年可期</li><li>下一站 · 青海湖</li><li>下下站 · 台湾环岛</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/千岛湖题图.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;p&gt;其实有段时间没骑行了，五一没有打算出去玩&lt;br&gt;然而剩下两天调休，于是今年计划之一的千岛湖骑行就提上日程了&lt;/p&gt;
    
    </summary>
    
      <category term="Sport" scheme="https://github.com/Cacivy/categories/Sport/"/>
    
    
      <category term="Bicycle" scheme="https://github.com/Cacivy/tags/Bicycle/"/>
    
      <category term="Travel" scheme="https://github.com/Cacivy/tags/Travel/"/>
    
  </entry>
  
  <entry>
    <title>聊聊我的运动装备</title>
    <link href="https://github.com/Cacivy/2019/04/27/%E8%81%8A%E8%81%8A%E6%88%91%E7%9A%84%E8%BF%90%E5%8A%A8%E8%A3%85%E5%A4%87/"/>
    <id>https://github.com/Cacivy/2019/04/27/聊聊我的运动装备/</id>
    <published>2019-04-27T00:00:00.000Z</published>
    <updated>2019-05-04T05:11:14.228Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/运动装备.jpg" alt></p><p>目前慢慢恢复跑步训练了，争取今年完成全马<br>比较期待的马拉松比赛</p><ul><li>杭马</li><li>西安马拉松</li><li>厦门马拉松</li></ul><a id="more"></a><h2 id="跑步"><a href="#跑步" class="headerlink" title="跑步"></a>跑步</h2><ul><li>短袖nike<ul><li>各方面都不错</li></ul></li><li>长袖安德玛<ul><li>海淘的，很紧身，料子也很好，但是感觉不太适合亚洲人体型</li></ul></li><li>nike短裤<ul><li>平时在家也会穿，有内衬</li><li>外观被说像沙滩裤</li></ul></li><li>nike压缩裤<ul><li>主要用来冬天保暖</li></ul></li><li>亚瑟士k24夜跑鞋<ul><li>算是第一双专业的跑鞋，各方面都很好</li></ul></li><li>安踏/nike头带 aonijie导汗带<ul><li>跑步挡汗</li></ul></li><li>优衣库运动外套<ul><li>保暖作用有限，适用于春秋，主要是不防风</li></ul></li></ul><h3 id="Garmin-Fenix-5"><a href="#Garmin-Fenix-5" class="headerlink" title="Garmin Fenix 5"></a>Garmin Fenix 5</h3><ul><li>跑步豆<br>可以记录跑步动态数据，用于提升，实际体验感知不大，短时间内也难提升，但可以进行针对性训练</li></ul><p>已经用了两年多了，当时买主要是功能+外观，目前损耗了一条黑色表带。<br>优点：</p><ul><li>续航极佳，轻度运动能用半个月</li><li>数据全面，各方面的日常数据包括运动数据都能满足</li><li>平台连接，strava，myFitnesspal，apple heath都完美自动同步<br>缺点：</li><li>数据同步慢，国内账号无法自动同步strava，所以又迁移到国际账号了</li><li>智能化几乎没有，不支持支付二维码等，新款好像可以</li></ul><h3 id="种草"><a href="#种草" class="headerlink" title="种草"></a>种草</h3><p>后续可能还会再入一双跑鞋 + 跑步短裤</p><h2 id="骑行"><a href="#骑行" class="headerlink" title="骑行"></a>骑行</h2><p>最近也准备把骑车捡起来了，除了通勤，把杭州也骑个遍好了</p><ul><li>千岛湖环湖</li><li>青海湖</li><li>环台湾</li></ul><h3 id="Garmin-Edge-520"><a href="#Garmin-Edge-520" class="headerlink" title="Garmin Edge 520"></a>Garmin Edge 520</h3><ul><li>心率带</li><li>速度计</li><li>踏频计<br>前段时间没电了，淘宝买来CR2032电池换上</li></ul><p>优点：</p><ul><li>数据全，可定制性高</li><li>续航佳，能用一天</li><li>ant+配件多<br>缺点：</li><li>地图功能几乎没有</li></ul><h3 id="Giant-TCR-ADV2"><a href="#Giant-TCR-ADV2" class="headerlink" title="Giant TCR ADV2"></a>Giant TCR ADV2</h3><ul><li>giant  头盔</li><li>giant  洗发水 套装</li><li>shimano 锁踏 + 锁鞋<br>目前通勤直接日常鞋骑锁踏也没有什么问题</li></ul><p>优点：</p><ul><li>骑了2000km+还没出现过任何小毛病</li><li>比较轻，架 + 座管都是碳纤维，车身不超过15斤</li><li>基本不用升级，shimano 5800套件 + 原装轮组配置够用<br>缺点：</li><li>还是喜欢队版的外观啊，毕竟全套小洗发水的队服</li><li>上次去车店看了新款涂装，还是我的黑红好看😋</li></ul><h3 id="种草-1"><a href="#种草-1" class="headerlink" title="种草"></a>种草</h3><p>因为路况、天气等等原因，骑行难以行动，打算在家撸台子，需要占用比较大的地方，可能会搁置挺久<br>目前看中的Tacx neo和迈金2代，前者除了太贵没啥缺点<br>理想状态就是：<br>骑行台 + ipad + Zwift + Strava</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/运动装备.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;目前慢慢恢复跑步训练了，争取今年完成全马&lt;br&gt;比较期待的马拉松比赛&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;杭马&lt;/li&gt;
&lt;li&gt;西安马拉松&lt;/li&gt;
&lt;li&gt;厦门马拉松&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Sport" scheme="https://github.com/Cacivy/categories/Sport/"/>
    
    
      <category term="Bicycle" scheme="https://github.com/Cacivy/tags/Bicycle/"/>
    
      <category term="Run" scheme="https://github.com/Cacivy/tags/Run/"/>
    
  </entry>
  
  <entry>
    <title>多年未更新的简历</title>
    <link href="https://github.com/Cacivy/2018/04/27/%E8%A9%B9%E9%9F%AC-%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88-%E7%AE%80%E5%8E%86/"/>
    <id>https://github.com/Cacivy/2018/04/27/詹韬-前端工程师-简历/</id>
    <published>2018-04-27T00:00:00.000Z</published>
    <updated>2019-05-04T05:11:14.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="詹韬-前端工程师-简历"><a href="#詹韬-前端工程师-简历" class="headerlink" title="詹韬-前端工程师-简历"></a>詹韬-前端工程师-简历</h1><h2 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  title: 詹韬/男/<span class="number">1996</span>/大专</span><br><span class="line">  working life: <span class="number">3</span>年</span><br><span class="line">  phone: <span class="number">13161472239</span></span><br><span class="line">  Email: cacivy@foxmail.com</span><br><span class="line">  Blog: https:<span class="comment">//cacivy.com</span></span><br><span class="line">  Github: https:<span class="comment">//github.com/cacivy</span></span><br><span class="line">  job title：前端高级工程师，专注于前段工程化以及数据可视化方向</span><br><span class="line">  salary: <span class="number">20</span>k~<span class="number">25</span>k</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li>编程语言 Javascript/Typescript/CSharp</li><li>前端框架 React/Vue/Angular/Avalon/Next/Gastby</li><li>后端开发 express/koa2/nestjs/ASP.NET MVC, 熟悉resetful接口开发，了解graphql</li><li>HTTP 了解HTTP协议，掌握跨域、缓存、Auth、JWT等</li><li>前端工具 Webpack/Rollup/Gulp/Sass/Postcss/Jade</li><li>数据库 MySQL/Mongodb/Redis</li><li>持续集成 Git/SVN/api-blueprint/Webhook/nginx/docker/travic</li><li>测试相关 Jest/Mocha/Chai</li></ul><h2 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h2><h3 id="国美互联网-2016-08-09-至今-T2-3"><a href="#国美互联网-2016-08-09-至今-T2-3" class="headerlink" title="国美互联网 (2016/08/09 ~ 至今)(T2-3)"></a>国美互联网 (2016/08/09 ~ 至今)(T2-3)</h3><h4 id="BI自助查询系统"><a href="#BI自助查询系统" class="headerlink" title="BI自助查询系统"></a>BI自助查询系统</h4><blockquote><p>实现可视化数据查询功能，通过拖拽、筛选等操作实现指标/维度选择，并可生成多种类型报表，包括Table、单指标、图表等…以及多仪表盘功能，可以自由拖动报表位置、调整大小、独立报表类型等操作</p></blockquote><ul><li>使用<code>Typescript</code>+<code>React</code>+<code>Mobx</code>+<code>Ant-design</code>搭建</li><li>使用<code>react-router-v4</code>，用组件路由的方式实现权限控制以及代码分割</li><li>很好的实践了组件分离的思想，多页面复用，并且实现嵌套组件(针对仪表盘中不同报表类型)</li><li>实现完整前端工程化以及自动化(<code>webpack</code>+<code>prettier</code>+<code>tslint</code>+<code>precommit</code>+<code>jenkins</code>)<br>​</li></ul><h4 id="大数据应用平台"><a href="#大数据应用平台" class="headerlink" title="大数据应用平台"></a>大数据应用平台</h4><blockquote><p>使用React重写前端部分，实践了前端工程化，系统管理的增删改查页面可以通过配置<code>columns</code>，<code>searchList</code>等信息自动生成，并且可以自定义操作菜单</p></blockquote><ul><li>使用<code>React</code>+<code>Mobx</code>+<code>Ant-design</code>搭建</li><li>通过<code>git-hook</code>的<code>pre-commit</code>钩子验证<code>eslint</code></li><li><code>json-server</code>+<code>fakerjs</code>实现<code>mock server</code>，并配置<code>webpack-dev-server</code>实现接口代理</li><li>使用<code>api-blueprint</code>实现<code>resetful api</code>接口文档</li><li>使用<code>jest</code>+<code>enzyme</code>实现单元组件测试</li><li>使用<code>Decorator</code>的方式实现自动生成组件页面(CURD)，可以兼容多数页面，保证开发效率</li></ul><h4 id="高管报表-WAP"><a href="#高管报表-WAP" class="headerlink" title="高管报表(WAP)"></a>高管报表(WAP)</h4><blockquote><p>通过React构建，搭配<code>Ant.design(mobile)</code>实现前后台界面。业务逻辑实现前端自动化，通过后台配置并绑定url，实现后端(<code>node</code>)传入配置自动渲染报表，并实现菜单切换、历史数据查询、复杂表格、图表展示、筛选、点击下钻等功能</p></blockquote><ul><li>脱离了原有的复杂开发模式，约定组件api，后台配置报表url，根据请求返回的配置渲染相应报表，实现前端自动化，并且支持复杂表格(单元格合并、筛选)和交互、下钻等功能</li><li>通过React+Redux搭建，采用单方向数据流，下钻功能通过<strong>递归组件</strong>实现，可以无限级的下钻并测试性能出色</li><li>后续报表开发无需前端开发人员参与，节省人力时间成本</li><li>通过动态设置<code>viewport</code>+<code>rem</code>(<code>postcss</code>自动转换)实现移动端不同设备适配</li><li>使用<code>webpack-bundle-analyzer</code>分析打包体积，通过多种优化手段(抽离公共库、忽略无用引用、<code>gzip</code>等)保证首屏渲染速度</li></ul><h4 id="数据开放平台"><a href="#数据开放平台" class="headerlink" title="数据开放平台"></a>数据开放平台</h4><blockquote><p>后台报表展示以及前端半自动化，后端使用express，包括权限控制、报表数据查询功能。前端使用<code>Vue</code>+<code>Vuex</code>+<code>Vue-Router</code>+<code>bootstrap</code>搭建，通过<code>gulp</code>配置<code>webpack</code>，后期从<code>ES5</code>升级到<code>ES6</code></p></blockquote><ul><li>该项目我主要负责前端组件的添加维护，以及后端api的开发，在原来的基础组件上添加了全局组件，并添加了平台权限管理的功能</li><li>项目使用了<code>Vue+vuex</code>渲染前端报表并保存状态，通过读取配置请求相应接口，并生成报表，通过自动渲染，实现了前端生产力的解放</li></ul><h4 id="数据开发平台"><a href="#数据开发平台" class="headerlink" title="数据开发平台"></a>数据开发平台</h4><blockquote><p>该项目实现了一个完整的BI流程，包括图形化/手动输入SQL实现添加数据源以及调度管理，并实现组件绑定数据源，报表图形化管理，并且可以绑定控制组件和展示组件，实现报表联动功能</p></blockquote><ul><li>SQL查询界面: 使用<code>Codemirror</code>实现SQL编辑框，左侧使用手风琴控件选择数据库列表，支持多数据库(<code>Hive、MySQL、Kylin</code>)，可以通过拖拽直接生成SQL</li><li>组件界面: 通过基础组件+Table+Chart多维度绑定columns，即时预览</li><li>报表界面: 通过自定义布局，将组件拖入相应布局位置即可实现报表，并且通过组件id进行绑定</li><li>权限管理: 通过<code>vuex</code>中<code>premission</code>信息判断是否显示操作按钮，通过后端返回状态码(<code>403</code>)控制相应页面的权限</li></ul><h3 id="北京北迈科技股份有限公司-2014-09-20-2016-07-20"><a href="#北京北迈科技股份有限公司-2014-09-20-2016-07-20" class="headerlink" title="北京北迈科技股份有限公司 (2014/09/20 ~ 2016/07/20)"></a>北京北迈科技股份有限公司 (2014/09/20 ~ 2016/07/20)</h3><h4 id="Sass云平台"><a href="#Sass云平台" class="headerlink" title="Sass云平台"></a>Sass云平台</h4><blockquote><p>负责整体项目的开发及搭建，并帮其它项目成员编写可复用的组件 使用Asp.Net MVC + VueJS进行前后端开发，后端主要提供数据接口。</p></blockquote><ul><li>使用<code>Vue-cli</code>进行前端的搭建，修改webpack配置实现多页面构建，并通过后端引入</li><li>根据业务需求fork并修改<code>Vue-Strap</code>开源项目</li><li>实现了上传、分页、列表等通用组件，以及多级筛选的复杂组件</li></ul><h4 id="POP商家平台"><a href="#POP商家平台" class="headerlink" title="POP商家平台"></a>POP商家平台</h4><ul><li>第一版使用<code>AvalonJS</code>，保证兼容性，并完成多级下拉框联查、复杂table、手风琴等组件</li><li>第二期使用了<code>Angular</code>，主要是CURD页面，通过扩展如<code>w5cvalidator、angular-router</code>实现更复杂的业务需求</li></ul><h4 id="电商网站前台"><a href="#电商网站前台" class="headerlink" title="电商网站前台"></a>电商网站前台</h4><ul><li>安装店页面:调用百度地图Api获取当前城市，并在地图展示安装店图标。地图左侧为安装店列表，根据用户坐标以及安装店坐标计算出距离并进行排序。</li><li>保养页面:使用<code>VueJs</code>开发，通过MVVM模式极大的简化实现了购物车的商品添加等操作</li><li>购物车:使用<code>MongoDB</code>保存用户购物车数据，未登录用户以<code>SessionID</code>保存。使用JQuery实现，采用OOP思想，来实现购物车的常规操作，数量添加修改。其它功能有安装服务选择以及安装店选择，使用类似安装店页面的JS插件实现安装店选择，并通过<code>Solr</code>查询安装店信息。</li><li>项目整体优化，如MySql索引、Redis缓存、MongoDB存储购物车信息</li></ul><h3 id="开源项目和作品"><a href="#开源项目和作品" class="headerlink" title="开源项目和作品"></a>开源项目和作品</h3><h4 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h4><ul><li><a href="https://github.com/Cacivy/zhihudaily">zhihudaily</a> 知乎日报，使用<code>vuejs</code>开发，并使用<code>express</code>实现接口代理</li><li><a href="https://github.com/Cacivy/2048">2048</a> 小游戏, 使用<code>react+mobx-state-tree</code>构建，并通过<code>travis+codecov</code>实现持续集成</li><li><a href="https://github.com/Cacivy/koa-typescript">koa-typescript</a> 使用<code>koa+typescript+mongodb</code>搭建的后台<code>resetful api</code>项目</li><li><a href="https://github.com/Cacivy/mder-electron">mder-electron</a> 使用<code>electron+react</code>实现的markdown编辑器客户端</li></ul><h4 id="演讲和讲义"><a href="#演讲和讲义" class="headerlink" title="演讲和讲义"></a>演讲和讲义</h4><ul><li>16/12月公司内部分享 《Angular+Typescript构建cnode社区》 <a href="https://github.com/Cacivy/angular-cnode">angular-cnode</a></li><li>6月公司内部演讲 《大数据应用平台前端选型》</li><li>7月公司内部分享 《通用报表系统前端架构》</li><li>7月公司内部培训 《React浅析》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;詹韬-前端工程师-简历&quot;&gt;&lt;a href=&quot;#詹韬-前端工程师-简历&quot; class=&quot;headerlink&quot; title=&quot;詹韬-前端工程师-简历&quot;&gt;&lt;/a&gt;詹韬-前端工程师-简历&lt;/h1&gt;&lt;h2 id=&quot;个人信息&quot;&gt;&lt;a href=&quot;#个人信息&quot; class=&quot;
      
    
    </summary>
    
      <category term="Work" scheme="https://github.com/Cacivy/categories/Work/"/>
    
    
      <category term="Resume" scheme="https://github.com/Cacivy/tags/Resume/"/>
    
  </entry>
  
  <entry>
    <title>关于2017</title>
    <link href="https://github.com/Cacivy/2018/01/02/%E5%85%B3%E4%BA%8E2017/"/>
    <id>https://github.com/Cacivy/2018/01/02/关于2017/</id>
    <published>2018-01-02T00:00:00.000Z</published>
    <updated>2019-05-04T05:11:14.227Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>时间和生活就像一个坐标轴，不同的是时间只有正半轴，生活却并不总是如此</p></blockquote><a id="more"></a><h3 id="TIME-LINE"><a href="#TIME-LINE" class="headerlink" title="TIME-LINE"></a>TIME-LINE</h3><ul><li>2月<ul><li>和室友合租，搬到公司附近</li><li>海淘<code>xps13-9360</code></li></ul></li><li>3月<ul><li>办理健身卡</li><li>开始做饭</li></ul></li><li>4月<ul><li>第一次做红烧鱼</li><li>第一辆公路车 <code>giant tcr adv2</code></li></ul></li><li>5月<ul><li>购买坚果pro</li><li>购买码表<code>garmin edge520</code></li><li>购买运动手表 <code>garmin fenix5</code></li><li>回家过端午、陪弟弟六一</li></ul></li><li>6月<ul><li>第一次骑行比赛</li><li>北戴河团建</li><li>第一次看海</li><li>第一次射箭</li><li>吃了一周健身餐</li></ul></li><li>7月<ul><li>购买电动牙刷</li></ul></li><li>8月<ul><li>参加FEDAY</li></ul></li><li>9月<ul><li>洗牙</li><li>购买跑鞋 <code>ASICS Kayano24</code></li><li>北京线上马拉松 <code>1h57</code></li></ul></li><li>10月<ul><li>公司996一个月</li><li>搬家，一个人住</li><li>小米智能家居</li></ul></li><li>11月<ul><li>购买坚果pro2</li><li>第一次线下半马比赛(婺源) <code>1h47</code></li></ul></li><li>12月<ul><li>第一次滑雪</li></ul></li></ul><h3 id="Categories"><a href="#Categories" class="headerlink" title="Categories"></a>Categories</h3><h4 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h4><ul><li><p>骑车</p><ul><li><strong>04.22-04.23</strong> 和朋友骑行平谷 <code>83km</code> + <code>71km</code></li><li><strong>04.29</strong> 首骑妙峰山 <code>2h30</code>登顶</li><li><strong>05.01</strong> 香山防火道</li><li><strong>05.06</strong> 组队骑行(狂魔) 东小高 <code>155km</code> </li><li><strong>05.08</strong> 第一次上锁</li><li><strong>06.10</strong> 士博途300小环线 <code>136km</code></li><li><strong>07.22</strong> 再战妙峰山 <code>1h31</code>登顶</li><li><strong>09.29</strong> 平谷吃桃 <code>135km</code> </li><li><strong>10.04-10.05</strong> 永宁-百里画廊-四海-回京 <code>92km</code> + <code>182km</code></li></ul></li><li><p>跑步</p><ul><li><strong>05.21</strong> 开跑(路跑) <code>8km</code></li><li><strong>05.24</strong> 朝阳公园<code>12Km</code></li><li><strong>07.24</strong> 挑战朝阳公园小怪兽30:00 <code>6k 29m47</code></li><li><strong>07.31</strong> 首次半马 <code>2h47</code></li><li><strong>09.10</strong> 和小圈圈，小二环-半马 <code>2h20</code></li><li><strong>09.17</strong> 北京线上马拉松，半马破二 <code>1h57</code></li><li><strong>11.26</strong> 婺源半马 <code>1h47</code></li></ul></li></ul><h4 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h4><ul><li><p>工作</p><ul><li>项目重构</li><li>BI-System</li><li>418大屏</li><li>2048</li><li>增加了几篇文章</li><li>讲了几个ppt</li><li>面试了十几个FEer</li><li>公司评级答辩</li></ul></li><li><p>技术</p><ul><li>React + Mobx + Typescript</li><li>Rollup</li><li>travis 自动集成</li><li>style-components/css modules</li><li>watermark by canvas</li><li>mock server by json-server</li><li>PWA by ServiceWorks</li></ul></li></ul><h4 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h4><ul><li>体重 <code>68kg - 60kg</code></li><li>通过<code>小爱同学</code>通知小米智能家居</li><li>今年骑车未大摔，幸之</li><li>地点<ul><li>五道营胡同</li><li>芳草地</li><li>前门</li><li>永宁古镇</li><li>百里画廊</li><li>古北水镇</li><li>北戴河</li><li>婺源</li></ul></li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">不管每一年经历了什么</span><br><span class="line">清晨照亮天际的一缕阳光</span><br><span class="line">午后笼罩整个城市的雾霾</span><br><span class="line">挡不住吹乱你思绪的大风</span><br><span class="line">又或是任由打在身上的涓滴细雨</span><br><span class="line">都过去了</span><br><span class="line">也还会伴随着。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;时间和生活就像一个坐标轴，不同的是时间只有正半轴，生活却并不总是如此&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="time" scheme="https://github.com/Cacivy/tags/time/"/>
    
  </entry>
  
  <entry>
    <title>使用Rollup实现React+Typescript开发环境配置</title>
    <link href="https://github.com/Cacivy/2017/12/21/%E4%BD%BF%E7%94%A8Rollup%E5%AE%9E%E7%8E%B0React-Typescript%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://github.com/Cacivy/2017/12/21/使用Rollup实现React-Typescript开发环境配置/</id>
    <published>2017-12-21T00:00:00.000Z</published>
    <updated>2019-05-04T05:11:14.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>rollup是一个新兴的JavaScript模块打包器，支持最新的ES6，并且可以通过插件实现更多功能<br>我目前想写一个react插件，对打包工具的要求只需要简单的转换tsx即可，再加上对demo项目搭建一个本地测试服务，所以并没有选择笨重的webpack</p><a id="more"></a><h2 id="先上代码"><a href="#先上代码" class="headerlink" title="先上代码"></a>先上代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> typescript <span class="keyword">from</span> <span class="string">'typescript'</span></span><br><span class="line"><span class="keyword">import</span> rollupTypescript <span class="keyword">from</span> <span class="string">'rollup-plugin-typescript'</span></span><br><span class="line"><span class="keyword">import</span> nodeResolve <span class="keyword">from</span> <span class="string">'rollup-plugin-node-resolve'</span></span><br><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">'rollup-plugin-commonjs'</span></span><br><span class="line"><span class="keyword">import</span> replace <span class="keyword">from</span> <span class="string">'rollup-plugin-replace'</span></span><br><span class="line"><span class="keyword">import</span> serve <span class="keyword">from</span> <span class="string">'rollup-plugin-serve'</span></span><br><span class="line"><span class="keyword">import</span> livereload <span class="keyword">from</span> <span class="string">'rollup-plugin-livereload'</span></span><br><span class="line"><span class="keyword">import</span> uglify <span class="keyword">from</span> <span class="string">'rollup-plugin-uglify'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dev = <span class="string">'development'</span></span><br><span class="line"><span class="keyword">const</span> prod = <span class="string">'production'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseNodeEnv</span>(<span class="params">nodeEnv</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nodeEnv === prod || nodeEnv === dev) &#123;</span><br><span class="line">    <span class="keyword">return</span> nodeEnv</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dev</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nodeEnv = parseNodeEnv(process.env.NODE_ENV)</span><br><span class="line"><span class="keyword">const</span> exampleBasicPath = <span class="string">'./example/'</span></span><br><span class="line"><span class="keyword">const</span> exampleBundle = exampleBasicPath + <span class="string">'/bundle.js'</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> plugins = [</span><br><span class="line">  replace(&#123;</span><br><span class="line">    <span class="comment">// The react sources include a reference to process.env.NODE_ENV so we need to replace it here with the actual value</span></span><br><span class="line">    <span class="string">'process.env.NODE_ENV'</span>: <span class="built_in">JSON</span>.stringify(nodeEnv)</span><br><span class="line">  &#125;),</span><br><span class="line">  rollupTypescript(&#123; typescript, <span class="attr">importHelpers</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pluginsExample = plugins.concat([</span><br><span class="line">  <span class="comment">// nodeResolve makes rollup look for dependencies in the node_modules directory</span></span><br><span class="line">  nodeResolve(),</span><br><span class="line">  commonjs(&#123;</span><br><span class="line">    <span class="comment">// All of our own sources will be ES6 modules, so only node_modules need to be resolved with cjs</span></span><br><span class="line">    include: <span class="string">'node_modules/**'</span>,</span><br><span class="line">    namedExports: &#123;</span><br><span class="line">      <span class="comment">// The commonjs plugin can't figure out the exports of some modules, so if rollup gives warnings like:</span></span><br><span class="line">      <span class="comment">// ⚠️   'render' is not exported by 'node_modules/react-dom/index.js'</span></span><br><span class="line">      <span class="comment">// Just add the mentioned file / export here</span></span><br><span class="line">      <span class="string">'node_modules/react-dom/index.js'</span>: [<span class="string">'render'</span>],</span><br><span class="line">      <span class="string">'node_modules/react/react.js'</span>: [<span class="string">'Component'</span>, <span class="string">'PropTypes'</span>, <span class="string">'createElement'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nodeEnv === dev) &#123;</span><br><span class="line">  <span class="comment">// For playing around with just frontend code the serve plugin is pretty nice.</span></span><br><span class="line">  <span class="comment">// We removed it when we started doing actual backend work.</span></span><br><span class="line">  pluginsExample.push(</span><br><span class="line">    serve(&#123;</span><br><span class="line">      contentBase: <span class="string">'./example/'</span>,</span><br><span class="line">      port,</span><br><span class="line">      historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">      open: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">  pluginsExample.push(livereload(&#123;</span><br><span class="line">    watch: exampleBundle</span><br><span class="line">  &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nodeEnv === prod) &#123;</span><br><span class="line">  plugins.push(uglify())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    input: <span class="string">'src/index.tsx'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">      file: <span class="string">'dist/bundle.js'</span>,</span><br><span class="line">      format: <span class="string">'umd'</span>,</span><br><span class="line">      name: <span class="string">'TextScroll'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      include: <span class="string">'./src/**'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    input: exampleBasicPath + <span class="string">'index.tsx'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">      file: exampleBundle,</span><br><span class="line">      format: <span class="string">'iife'</span>,</span><br><span class="line">      name: <span class="string">'TextScroll'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      include: [<span class="string">'./src/**'</span>, exampleBasicPath + <span class="string">'**'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: pluginsExample</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>先介绍基本参数</p><ul><li>input 入口文件</li><li>output<ul><li>file 打包后文件</li><li>format 打包类型(amd, cjs, es, iife, umd)</li><li>name UMD类型需要</li></ul></li><li>watch 检测的路径</li><li>plugins 插件</li></ul><p>可以看到代码最后export了一个数组，里面有两个对象，分别负责不同的作用</p><ol><li>打包index.tsx文件，只使用<code>typescript</code>插件进行转换</li><li>打包example里的index.tsx文件，除了<code>typescript</code>插件，还使用<code>nodeResolve</code>和commanjs把<code>react</code>和<code>reactDOM</code>库进行打包。以及使用<code>serve</code>和<code>liveload</code>插件实现本地服务器和代码检测浏览器自动刷新</li></ol><h2 id="对比Webpack"><a href="#对比Webpack" class="headerlink" title="对比Webpack"></a>对比Webpack</h2><p>不再像webpack动辄十几个插件，配置也还算简单，但并没有预期的那么好用，期待<a href="https://parceljs.org/" target="_blank" rel="noopener">parceljs</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;rollup是一个新兴的JavaScript模块打包器，支持最新的ES6，并且可以通过插件实现更多功能&lt;br&gt;我目前想写一个react插件，对打包工具的要求只需要简单的转换tsx即可，再加上对demo项目搭建一个本地测试服务，所以并没有选择笨重的webpack&lt;/p&gt;
    
    </summary>
    
      <category term="Code" scheme="https://github.com/Cacivy/categories/Code/"/>
    
    
      <category term="JavaScript" scheme="https://github.com/Cacivy/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅的实现queryString转换</title>
    <link href="https://github.com/Cacivy/2017/08/23/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E5%AE%9E%E7%8E%B0queryString%E8%BD%AC%E6%8D%A2/"/>
    <id>https://github.com/Cacivy/2017/08/23/如何优雅的实现queryString转换/</id>
    <published>2017-08-23T00:00:00.000Z</published>
    <updated>2019-05-04T05:11:14.228Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/URL" target="_blank" rel="noopener"><strong>URL</strong></a>和<a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams" target="_blank" rel="noopener"><strong>URLSearchParams</strong></a>都是window的内置对象，借助于它们可以实现url querystring转换</p><h3 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_const url_ = <span class="keyword">new</span> URL(_urlString_, [_baseURLstring_])</span><br><span class="line"></span><br><span class="line">_const url_ = <span class="keyword">new</span> URL(_urlString_, _baseURLobject_)</span><br></pre></td></tr></table></figure><p><em>urlString</em></p><p>一个绝对或相对URL</p><p>_baseURLstring _可选</p><p><code>_urlString_</code>为相对URL时使用，默认为“about：blank”，如果是无效的绝对URL则会引发异常</p><p><em>baseURLobject</em></p><p>URL对象，作用同<code>_baseURLstring _</code></p><a id="more"></a><h3 id="toJSON"><a href="#toJSON" class="headerlink" title="toJSON"></a>toJSON</h3><p>通过URL对象可以很方便的把search字符串转换为json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* get url query object</span></span><br><span class="line"><span class="comment">* @param  &#123;string&#125;  str e: '?a=1&amp;b=2&amp;c=aa'</span></span><br><span class="line"><span class="comment">* @return  &#123;object&#125; o: &#123;a: "1", b: "2", c: "aa"&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// before</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> toJSON = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">  str.substr(<span class="number">1</span>).split(<span class="string">'&amp;'</span>).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> kv = item.split(<span class="string">'='</span>)</span><br><span class="line">    <span class="keyword">if</span> (kv &amp;&amp; kv.length) &#123;</span><br><span class="line">      obj[kv[<span class="number">0</span>]] = kv[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// after</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> toJSON = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="keyword">new</span> URL(str)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> url.searchParams.entries()) &#123;</span><br><span class="line">    obj[key] = value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>  obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="toQueryString"><a href="#toQueryString" class="headerlink" title="toQueryString"></a>toQueryString</h3><p>这里需要用到URLSearchParams对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* convert object to querystring</span></span><br><span class="line"><span class="comment">* @param  &#123;object&#125;  obj e: &#123;a: 1, b: 2, c: 'aa'&#125;</span></span><br><span class="line"><span class="comment">* @return  &#123;string&#125; o: &#123;a: 1, b: 2, c: 'aa'&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// before</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> toQuery = <span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">'?'</span></span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function">(<span class="params">key, i</span>) =&gt;</span> &#123;</span><br><span class="line">    str += <span class="string">`<span class="subst">$&#123;i ? <span class="string">'&amp;'</span> : <span class="string">''</span>&#125;</span><span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;obj[key]&#125;</span>`</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// after</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> toQuery = <span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> params = <span class="keyword">new</span>  URLSearchParams()</span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    params.append(key, obj.key)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> params.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上代码对比，虽然代码量相差不多，带上明显后者实现更加优雅，而且不易出错，避免了操作字符串的各种问题</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URL&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;URL&lt;/strong&gt;&lt;/a&gt;和&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;URLSearchParams&lt;/strong&gt;&lt;/a&gt;都是window的内置对象，借助于它们可以实现url querystring转换&lt;/p&gt;
&lt;h3 id=&quot;Constructor&quot;&gt;&lt;a href=&quot;#Constructor&quot; class=&quot;headerlink&quot; title=&quot;Constructor&quot;&gt;&lt;/a&gt;Constructor&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_const url_ = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; URL(_urlString_, [_baseURLstring_])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_const url_ = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; URL(_urlString_, _baseURLobject_)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;urlString&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;一个绝对或相对URL&lt;/p&gt;
&lt;p&gt;_baseURLstring _可选&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_urlString_&lt;/code&gt;为相对URL时使用，默认为“about：blank”，如果是无效的绝对URL则会引发异常&lt;/p&gt;
&lt;p&gt;&lt;em&gt;baseURLobject&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;URL对象，作用同&lt;code&gt;_baseURLstring _&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Code" scheme="https://github.com/Cacivy/categories/Code/"/>
    
    
      <category term="JavaScript" scheme="https://github.com/Cacivy/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>使用Eslint &amp; Standard管理前端代码风格</title>
    <link href="https://github.com/Cacivy/2017/08/09/%E4%BD%BF%E7%94%A8Eslint-Standard%E7%AE%A1%E7%90%86%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC/"/>
    <id>https://github.com/Cacivy/2017/08/09/使用Eslint-Standard管理前端代码风格/</id>
    <published>2017-08-09T00:00:00.000Z</published>
    <updated>2019-05-04T05:11:14.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Eslint"><a href="#Eslint" class="headerlink" title="Eslint"></a>Eslint</h2><p>eslint是一个<code>QA工具</code>，用来保证团队代码风格一致性，以及避免低级错误，支持JS/JSX文件</p><p>通过<code>.eslintrc.json</code>可以对eslint进行配置，并且可以安装插件进行不同代码风格的自动配置</p><h2 id="Standard"><a href="#Standard" class="headerlink" title="Standard"></a><a href="https://github.com/standard/standard">Standard</a></h2><p>standard是一套JavaScript 代码规范，自带 linter &amp; 代码自动修正</p><a id="more"></a><h3 id="细则"><a href="#细则" class="headerlink" title="细则"></a>细则</h3><ul><li><strong>使用两个空格</strong> – 进行缩进</li><li><strong>字符串使用单引号</strong> – 需要转义的地方除外</li><li><strong>不再有冗余的变量</strong> – 这是导致 <em>大量</em> bug 的源头!</li><li><strong>无分号</strong></li><li><strong>行首不要以 <code>(</code>, <code>[</code>, or <code>`</code> 开头</strong><ul><li>这是省略分号时<strong>唯一</strong>会造成问题的地方 – <em>工具里已加了自动检测！</em></li></ul></li><li><strong>关键字后加空格</strong> <code>if (condition) { ... }</code></li><li><strong>函数名后加空格</strong> <code>function name (arg) { ... }</code></li><li>坚持使用全等 <code>===</code> 摒弃 <code>==</code> 一但在需要检查 <code>null || undefined</code> 时可以使用 <code>obj == null</code>。</li><li>一定要处理 Node.js 中错误回调传递进来的 <code>err</code> 参数。</li><li>使用浏览器全局变量时加上 <code>window</code> 前缀 – <code>document</code> 和 <code>navigator</code> 除外<ul><li>避免无意中使用到了这些命名看上去很普通的全局变量， <code>open</code>, <code>length</code>,<br><code>event</code> 还有 <code>name</code>。</li></ul></li><li><strong><a href="https://github.com/standard/standard">查看更多</a></strong></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>standard作为插件的形式配置Eslin，并进行代码风格检查</p><h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev eslint-config-standard eslint-config-standard-jsx eslint-plugin-standard eslint-plugin-promise eslint-plugin-import eslint-plugin-node eslint-plugin-react</span><br></pre></td></tr></table></figure><p>// .eslintrc.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"env"</span>: &#123;</span><br><span class="line">    <span class="attr">"browser"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"commonjs"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"es6"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"node"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"extends"</span>: [<span class="string">"standard"</span>, <span class="string">"standard-jsx"</span>],</span><br><span class="line">  <span class="attr">"parserOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"ecmaFeatures"</span>: &#123;</span><br><span class="line">      <span class="attr">"experimentalObjectRestSpread"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"jsx"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"sourceType"</span>: <span class="string">"module"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"plugins"</span>: [</span><br><span class="line">    <span class="string">"react"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"parser"</span>: <span class="string">"babel-eslint"</span>,</span><br><span class="line">  <span class="attr">"rules"</span>: &#123;</span><br><span class="line">    <span class="attr">"strict"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"no-console"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"no-unused-vars"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"space-before-function-paren"</span>: [<span class="string">"error"</span>, <span class="string">"always"</span>],</span><br><span class="line">    <span class="attr">"jsx-quotes"</span>: [<span class="string">"error"</span>, <span class="string">"prefer-double"</span>],</span><br><span class="line">    <span class="attr">"react/prop-types"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"react/no-children-prop"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"react/self-closing-comp"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"react/jsx-pascal-case"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"react/jsx-closing-bracket-location"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"react/sort-comp"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"react/jsx-uses-vars"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"react/react-in-jsx-scope"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"react/display-name"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"react/jsx-key"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"react/jsx-tag-spacing"</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip"><br><br>因为standard在jsx中会默认使用单引号的规则，所以需要加上<code>&quot;jsx-quotes&quot;: [&quot;error&quot;, &quot;prefer-double&quot;]</code>保证jsx中属性为双引号<br>还有<code>space-before-function-paren</code>需要设置和standard一致<br><br></div><h3 id="fix"><a href="#fix" class="headerlink" title="fix"></a>fix</h3><p><code>&quot;fix&quot;: &quot;./node_modules/.bin/eslint src/**/*.js src/**/*.jsx --fix&quot;</code></p><h3 id="pre-commit"><a href="#pre-commit" class="headerlink" title="pre-commit"></a>pre-commit</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i pre-commmit --save-dev</span><br></pre></td></tr></table></figure><p>// eslint.sh<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> $(git diff --cached --name-only | grep -E <span class="string">'\.(js|jsx)$'</span>)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  git show ":$file" | node_modules/.bin/eslint --stdin --stdin-filename "$file" # we only want to lint the staged changes, not any un-staged changes</span><br><span class="line">  <span class="keyword">if</span> [ $? -ne <span class="number">0</span> ]; then</span><br><span class="line">    echo <span class="string">"ESLint failed on staged file '$file'. Please check your code and try again. You can run ESLint manually via npm run eslint."</span></span><br><span class="line">    exit 1 # exit with failure status</span><br><span class="line">  fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>// package.json<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"eslint"</span>: <span class="string">"sh eslint.sh"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"pre-commit"</span>: [</span><br><span class="line">    <span class="string">"eslint"</span>: <span class="string">"sh eslint.sh"</span>,</span><br><span class="line">    <span class="string">"eslint"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><div class="tip"><br><br>这样每次commit都会对暂存区的js/jsx文件进行检测了(检测会花费一些时间，耐心点)，当然也可以直接修改<code>.git/hooks/pre-commit</code>，因为git hook无法提交，所以改为外部脚本。<br><br></div>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Eslint&quot;&gt;&lt;a href=&quot;#Eslint&quot; class=&quot;headerlink&quot; title=&quot;Eslint&quot;&gt;&lt;/a&gt;Eslint&lt;/h2&gt;&lt;p&gt;eslint是一个&lt;code&gt;QA工具&lt;/code&gt;，用来保证团队代码风格一致性，以及避免低级错误，支持JS/JSX文件&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;.eslintrc.json&lt;/code&gt;可以对eslint进行配置，并且可以安装插件进行不同代码风格的自动配置&lt;/p&gt;
&lt;h2 id=&quot;Standard&quot;&gt;&lt;a href=&quot;#Standard&quot; class=&quot;headerlink&quot; title=&quot;Standard&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/standard/standard&quot;&gt;Standard&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;standard是一套JavaScript 代码规范，自带 linter &amp;amp; 代码自动修正&lt;/p&gt;
    
    </summary>
    
      <category term="Code" scheme="https://github.com/Cacivy/categories/Code/"/>
    
    
      <category term="JavaScript" scheme="https://github.com/Cacivy/tags/JavaScript/"/>
    
      <category term="Eslint" scheme="https://github.com/Cacivy/tags/Eslint/"/>
    
      <category term="Standard" scheme="https://github.com/Cacivy/tags/Standard/"/>
    
  </entry>
  
  <entry>
    <title>前端项目中的RESTful API管理</title>
    <link href="https://github.com/Cacivy/2017/08/07/%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E7%9A%84API%E7%AE%A1%E7%90%86/"/>
    <id>https://github.com/Cacivy/2017/08/07/前端项目的API管理/</id>
    <published>2017-08-07T00:00:00.000Z</published>
    <updated>2019-05-04T05:11:14.228Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/get /users</span><br><span class="line">/getByID /users/:id</span><br><span class="line">/post /users [body]</span><br><span class="line">/put /users/:id [body]</span><br><span class="line">/patch /users/:id [body]</span><br><span class="line">/delete /users/:id</span><br></pre></td></tr></table></figure><p>以上是一些基本规范，但REST不是银弹，比如<code>批量处理</code>、<code>getuser</code>、<code>login</code></p><a id="more"></a><h2 id="Mock-Server"><a href="#Mock-Server" class="headerlink" title="Mock Server"></a>Mock Server</h2><p>前端独立于后端，除了约定API，还需要<code>mock server</code><br>一般使用<a href="https://github.com/typicode/json-server">json-server</a>配合<a href="https://github.com/Marak/faker.js">faker.js</a><br>接口测试则是通过<code>postman</code>，并且可以生成文档、分享等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> jsonServer = <span class="built_in">require</span>(<span class="string">'json-server'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> server = jsonServer.create()</span><br><span class="line"><span class="keyword">const</span> data = <span class="built_in">require</span>(<span class="string">'./data'</span>)</span><br><span class="line"><span class="comment">//path.join(__dirname, 'db.json')</span></span><br><span class="line"><span class="keyword">const</span> router = jsonServer.router(data())</span><br><span class="line"><span class="keyword">const</span> middlewares = jsonServer.defaults()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resData</span>(<span class="params">data=&#123;&#125;, code=<span class="number">200</span>, msg=<span class="string">''</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    code,</span><br><span class="line">    data,</span><br><span class="line">    msg</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Custom output</span></span><br><span class="line">router.render = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.jsonp(resData(res.locals.data, res.statusCode))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set default middlewares (logger, static, cors and no-cache)</span></span><br><span class="line">server.use(middlewares)</span><br><span class="line"></span><br><span class="line"><span class="comment">// To handle POST, PUT and PATCH you need to use a body-parser</span></span><br><span class="line"><span class="comment">// You can use the one used by JSON Server</span></span><br><span class="line">server.use(jsonServer.bodyParser)</span><br><span class="line">server.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// if (req.method === 'POST') &#123;</span></span><br><span class="line">  <span class="comment">//   req.body.createdAt = Date.now()</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> session</span><br><span class="line"></span><br><span class="line">server.get(<span class="string">'/api/user'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (session) &#123;</span><br><span class="line">    res.jsonp(resData(session, <span class="number">200</span>))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.jsonp(resData(<span class="literal">undefined</span>, <span class="number">403</span>, <span class="string">'未登录'</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.post(<span class="string">'/api/login'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> body = req.body, code = <span class="number">302</span>, data = &#123;&#125;, msg = <span class="string">'密码错误'</span></span><br><span class="line">  <span class="keyword">if</span> (body.username === <span class="string">'admin'</span> &amp;&amp; body.password === <span class="string">'admin'</span>) &#123;</span><br><span class="line">    msg = <span class="string">''</span></span><br><span class="line">    code = <span class="number">200</span></span><br><span class="line">    data = req.body</span><br><span class="line">    data.id = <span class="number">1</span></span><br><span class="line">    <span class="keyword">delete</span> data.password</span><br><span class="line">    session = data</span><br><span class="line">  &#125;</span><br><span class="line">  res.jsonp(resData(data, code, msg))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.get(<span class="string">'/api/logout'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  session = <span class="literal">null</span></span><br><span class="line">  res.jsonp(resData(&#123;&#125;, <span class="number">200</span>, <span class="string">'注销成功'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use default router</span></span><br><span class="line">server.use(<span class="string">'/api'</span>, router)</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">9999</span></span><br><span class="line">server.listen(port, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'JSON Server is running, port: '</span>+ port)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// data.js</span></span><br><span class="line"><span class="keyword">const</span> faker = <span class="built_in">require</span>(<span class="string">'faker'</span>)</span><br><span class="line">faker.locale = <span class="string">'zh_CN'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    users: [],</span><br><span class="line">    roles: [],</span><br><span class="line">    departments: []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Create 100users</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    data.users.push(&#123;</span><br><span class="line">      id: i,</span><br><span class="line">      username: faker.name.findName(),</span><br><span class="line">      nikename: faker.name.findName(),</span><br><span class="line">      freezeState: faker.random.boolean(),</span><br><span class="line">      freezeInfo: faker.lorem.sentence()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">28</span>; i++) &#123;</span><br><span class="line">    data.roles.push(&#123;</span><br><span class="line">      id: i,</span><br><span class="line">      no: faker.name.jobType(),</span><br><span class="line">      name: faker.name.jobType(),</span><br><span class="line">      type: faker.name.jobType()</span><br><span class="line">    &#125;)</span><br><span class="line">    data.departments.push(&#123;</span><br><span class="line">      id: i,</span><br><span class="line">      name: faker.commerce.department(),</span><br><span class="line">      description: faker.commerce.productAdjective()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="API-Manage"><a href="#API-Manage" class="headerlink" title="API Manage"></a>API Manage</h2><p>这里使用axios作为http请求库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> instance <span class="keyword">from</span> <span class="string">'./instance'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> apiConfig = &#123;</span><br><span class="line">  login: [<span class="string">'get'</span>, <span class="string">'post'</span>],</span><br><span class="line">  logout: [<span class="string">'get'</span>],</span><br><span class="line">  user: [<span class="string">'get'</span>],</span><br><span class="line">  users: [],</span><br><span class="line">  roles: [],</span><br><span class="line">  departments: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> API = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultMethods = [<span class="string">'get'</span>, <span class="string">'post'</span>, <span class="string">'put'</span>, <span class="string">'patch'</span>, <span class="string">'delete'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getMethod = <span class="function">(<span class="params">key, method</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (method) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'get'</span>:</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">params</span>) =&gt;</span> instance.get(key, &#123;</span><br><span class="line">      params</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'getById'</span>:</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">id, params</span>) =&gt;</span> instance.get(<span class="string">`<span class="subst">$&#123;key&#125;</span>/<span class="subst">$&#123;id&#125;</span>`</span>, &#123;params&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'post'</span>:</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">body</span>) =&gt;</span> instance.post(key, body)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'put'</span>:</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">id, body</span>) =&gt;</span> instance.put(<span class="string">`<span class="subst">$&#123;key&#125;</span>/<span class="subst">$&#123;id&#125;</span>`</span>, body)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'patch'</span>:</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">id, body</span>) =&gt;</span> instance.patch(<span class="string">`<span class="subst">$&#123;key&#125;</span>/<span class="subst">$&#123;id&#125;</span>`</span>, body)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'delete'</span>:</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">id</span>) =&gt;</span> instance.delete(<span class="string">`<span class="subst">$&#123;key&#125;</span>/<span class="subst">$&#123;id&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(apiConfig)) &#123;</span><br><span class="line">  <span class="keyword">let</span> list = apiConfig[key].length ? apiConfig[key] : defaultMethods</span><br><span class="line">  list.forEach(<span class="function"><span class="params">method</span> =&gt;</span> &#123;</span><br><span class="line">    API[key] = API[key] || &#123;&#125;</span><br><span class="line">    API[key][method] = getMethod(key, method)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> API</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// instance.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; httpConfig <span class="keyword">as</span> host &#125; <span class="keyword">from</span> <span class="string">'config'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> &#123; message &#125; <span class="keyword">from</span> <span class="string">'antd'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  baseURL: host,</span><br><span class="line">  timeout: <span class="number">10000</span>,</span><br><span class="line">  withCredentials: <span class="literal">true</span>,</span><br><span class="line">  headers: &#123;&#125;,</span><br><span class="line">  validateStatus (status) &#123;</span><br><span class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt;= <span class="number">500</span> <span class="comment">// default</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局request钩子</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局response钩子</span></span><br><span class="line">instance.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 请求失败</span></span><br><span class="line">  <span class="keyword">if</span> (response.status.toString().substr(<span class="number">0</span>, <span class="number">1</span>) !== <span class="string">'2'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response.data)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// code 302 登录失败</span></span><br><span class="line">  <span class="keyword">if</span> (response.data.code === <span class="number">302</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response.data)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// code 403 无权限</span></span><br><span class="line">  <span class="keyword">if</span> (response.data.code === <span class="number">403</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response.data)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 其它错误</span></span><br><span class="line">  <span class="keyword">if</span> (response.data.code.toString().substr(<span class="number">0</span>, <span class="number">1</span>) !== <span class="string">'2'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response.data)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> count = response.headers[<span class="string">'x-total-count'</span>]</span><br><span class="line">  <span class="keyword">if</span> (count !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    response.data.count = count</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> response.data</span><br><span class="line">&#125;, (error) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (error.message.indexOf(<span class="string">'timeout'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    message.error(<span class="string">'请求超时！'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// use</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> API.login.post()</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(error)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"></span><br><span class="line">API.login.post().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>以上就实现了api统一管理，并通过API对象下不同接口子对象进行调用</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;RESTful-API&quot;&gt;&lt;a href=&quot;#RESTful-API&quot; class=&quot;headerlink&quot; title=&quot;RESTful API&quot;&gt;&lt;/a&gt;RESTful API&lt;/h2&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/get /users&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/getByID /users/:id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/post /users [body]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/put /users/:id [body]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/patch /users/:id [body]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/delete /users/:id&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上是一些基本规范，但REST不是银弹，比如&lt;code&gt;批量处理&lt;/code&gt;、&lt;code&gt;getuser&lt;/code&gt;、&lt;code&gt;login&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack优化指南</title>
    <link href="https://github.com/Cacivy/2017/07/25/webpack%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97/"/>
    <id>https://github.com/Cacivy/2017/07/25/webpack优化指南/</id>
    <published>2017-07-25T00:00:00.000Z</published>
    <updated>2019-05-04T05:11:14.227Z</updated>
    
    <content type="html"><![CDATA[<p>主要针对以下几个问题进行优化：</p><ol><li>打包编译速度慢</li><li>打包后文件体积大</li></ol><p>使用<code>webpack-bundle-analyzer</code>插件可以图形化观看每个module的体积大小</p><a id="more"></a><ul><li>抽取公共库部分合并从html中引入，然后配置externals，如</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">externals: &#123;</span><br><span class="line">   <span class="string">'react'</span>: <span class="string">'React'</span>,</span><br><span class="line">   <span class="string">'react-dom'</span>: <span class="string">'ReactDOM'</span>,</span><br><span class="line">   <span class="string">'redux'</span>: <span class="string">'Redux'</span>,</span><br><span class="line">   <span class="string">'react-redux'</span>: <span class="string">'ReactRedux'</span>,</span><br><span class="line">   <span class="string">'axios'</span>: <span class="string">'axios'</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li><p>ExtractTextPlugin把css文件单独抽离出来</p></li><li><p>gzip压缩</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> CompressionWebpackPlugin(&#123; <span class="comment">//gzip 压缩</span></span><br><span class="line">  asset: <span class="string">'[path].gz[query]'</span>,</span><br><span class="line">  algorithm: <span class="string">'gzip'</span>,</span><br><span class="line">  test: <span class="keyword">new</span> <span class="built_in">RegExp</span>(</span><br><span class="line">    <span class="string">'\\.(js|css)$'</span> <span class="comment">//压缩 js 与 css</span></span><br><span class="line">  ),</span><br><span class="line">  threshold: <span class="number">10240</span>,</span><br><span class="line">  minRatio: <span class="number">0</span></span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><ul><li>忽略moment中其它语言包</li></ul><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.ContextReplacementPlugin(<span class="regexp">/moment[\/\\]locale$/</span>, <span class="regexp">/zh/</span>)</span><br></pre></td></tr></table></figure><ul><li>使用DllPlugin抽离公共库，然后通过script标签引入</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.vendor.config.js</span></span><br><span class="line"><span class="keyword">const</span> vendors = [<span class="string">'react'</span>, <span class="string">'react-dom'</span>, <span class="string">'mobx'</span>, <span class="string">'mobx-react'</span>, <span class="string">'axios'</span>];</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: paths.appPublic,</span><br><span class="line">    filename: <span class="string">'[name].[chunkhash:8].js'</span>,</span><br><span class="line">    library: <span class="string">'[name]_[chunkhash:8]'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="string">'vendor'</span>: vendors,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(env.stringified),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      compress: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span>,</span><br><span class="line">        comparisons: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      output: &#123;</span><br><span class="line">        comments: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      sourceMap: <span class="literal">true</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      path: path.join(__dirname, <span class="string">'[name]-manifest.json'</span>),</span><br><span class="line">      name: <span class="string">'[name]_[chunkhash:8]'</span>,</span><br><span class="line">      context: __dirname,</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.config.prod.js</span></span><br><span class="line"><span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">  context: __dirname, </span><br><span class="line">  manifest: <span class="built_in">require</span>(<span class="string">'./vendor-manifest.json'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要针对以下几个问题进行优化：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打包编译速度慢&lt;/li&gt;
&lt;li&gt;打包后文件体积大&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用&lt;code&gt;webpack-bundle-analyzer&lt;/code&gt;插件可以图形化观看每个module的体积大小&lt;/p&gt;
    
    </summary>
    
      <category term="Code" scheme="https://github.com/Cacivy/categories/Code/"/>
    
    
      <category term="JavaScript" scheme="https://github.com/Cacivy/tags/JavaScript/"/>
    
      <category term="Webpack" scheme="https://github.com/Cacivy/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>如何搭建一个移动端自动化报表平台的前端项目</title>
    <link href="https://github.com/Cacivy/2017/06/26/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8A%A5%E8%A1%A8%E5%B9%B3%E5%8F%B0%E7%9A%84%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    <id>https://github.com/Cacivy/2017/06/26/如何搭建一个移动端自动化报表平台的前端项目/</id>
    <published>2017-06-26T00:00:00.000Z</published>
    <updated>2019-05-04T05:11:14.228Z</updated>
    
    <content type="html"><![CDATA[<p>关键字：自动化、报表、WAP</p><h3 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h3><blockquote><p>指机器设备、系统或过程（生产、管理过程）在没有人或较少人的直接参与下，按照人的要求，经过自动检测、信息处理、分析判断、操纵控制，实现预期的目标的过程</p></blockquote><p>这是自动化的广泛定义，那么在前端项目中如何做到自动化呢？<br>首先是配置，在前端组件化泛滥的今天，一个良好的配置项和API显得尤为重要</p><ul><li>低耦合 例如React中的纯函数组件思想，给组件传入相同的props得到的必定是同样的结果</li><li>可复用性 复用性越强，则暴露的接口越多，也更灵活。但带来的缺点是API过于复杂，所以需要给定默认值，也就是可根据需求传入配置</li><li>后端对接 后端需要对API进行独立封装，更语义化，前端拿到的还是基础API，并进行解析展示相应模块和组件</li><li>后台配置 通过可视化的方式进行报表配置，并将配置项保存到数据库，同时所见即所得，在配置页可增加预览报表功能</li></ul><a id="more"></a><h3 id="报表"><a href="#报表" class="headerlink" title="报表"></a>报表</h3><p>简单来说，在我们的业务需求中，图表 + 表格 =  报表。根据两者的不同比重可以进行不同的定制</p><ul><li>图表 主要是灵活性/易用性的取舍问题。我们通过后端返回全部图表配置，前端仅进行渲染工作，这样带来的好处是完全通过后端配置，灵活性很高，并且后端可以进行封装，对一些通用配置可统一处理，也保持了易用性</li><li>表格 表格的复杂度完全取决于业务需求。并且表格的可配置性很低，所以很多需求需要单独处理。可以先对基础表格进行一些业务需求的定制，比如排序、筛选、头部固定等功能，然后再根据复杂需求进行深度定制，在前端对表格配置进行转换，并提出公共函数进行处理</li><li>下钻功能 下钻指的是点击进入子级页面，在层级数不确定的情况下可以使用递归组件，控制好标识和父子页面的关键的前提下，可以简化大量工作</li></ul><h3 id="WAP"><a href="#WAP" class="headerlink" title="WAP"></a>WAP</h3><p>表格在WAP上展示是一个难题，相对较小的设备屏幕，更小的展示空间，如何获得更多更直观的数据信息?</p><ul><li>fixed 重要表格行、列固定，如总计行、分类列等</li><li>overflow 既然屏幕空间小，那么滚动表的不可避免的</li><li>性能优化 在数据量小的情况下，可以获取所有分类的报表数据，直接在内存中进行数据切换展示。数据量大的情况则可以滚动加载，根据滚动条加载当前视觉窗口的数据，即无限滚动的原理</li></ul><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>这篇文章并没有设计到具体的开发框架和架构，只是提供一个开发模式和流程控制，在这个基础上可以选型任何前端框架，保证代码质量的情况下，都可以搭建一个快速、易用、并强大的前端自动化报表平台</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关键字：自动化、报表、WAP&lt;/p&gt;
&lt;h3 id=&quot;自动化&quot;&gt;&lt;a href=&quot;#自动化&quot; class=&quot;headerlink&quot; title=&quot;自动化&quot;&gt;&lt;/a&gt;自动化&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;指机器设备、系统或过程（生产、管理过程）在没有人或较少人的直接参与下，按照人的要求，经过自动检测、信息处理、分析判断、操纵控制，实现预期的目标的过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是自动化的广泛定义，那么在前端项目中如何做到自动化呢？&lt;br&gt;首先是配置，在前端组件化泛滥的今天，一个良好的配置项和API显得尤为重要&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;低耦合 例如React中的纯函数组件思想，给组件传入相同的props得到的必定是同样的结果&lt;/li&gt;
&lt;li&gt;可复用性 复用性越强，则暴露的接口越多，也更灵活。但带来的缺点是API过于复杂，所以需要给定默认值，也就是可根据需求传入配置&lt;/li&gt;
&lt;li&gt;后端对接 后端需要对API进行独立封装，更语义化，前端拿到的还是基础API，并进行解析展示相应模块和组件&lt;/li&gt;
&lt;li&gt;后台配置 通过可视化的方式进行报表配置，并将配置项保存到数据库，同时所见即所得，在配置页可增加预览报表功能&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Migration to vue 2.0</title>
    <link href="https://github.com/Cacivy/2016/10/09/Vue2-0/"/>
    <id>https://github.com/Cacivy/2016/10/09/Vue2-0/</id>
    <published>2016-10-09T00:00:00.000Z</published>
    <updated>2019-05-04T05:11:14.227Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>需要升级的包列表</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm i vue@2.0.1 --save</span><br><span class="line">npm i vue-router@2.0.0 --save</span><br><span class="line">npm i vuex@2.0.0 --save</span><br><span class="line">npm i vuex-router-sync@3.0.0 --save</span><br><span class="line">npm i vuex-loader@9.5.1 --save-dev</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>下面概括一些比较常用语法的修改</p></blockquote><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><h4 id="basic"><a href="#basic" class="headerlink" title="basic"></a>basic</h4><p>​    <a href="http://vuejs.org/guide/migration.html" target="_blank" rel="noopener">Migration from Vue 1.x</a></p><p>​    官方文档已经很详细了</p><h4 id="ready"><a href="#ready" class="headerlink" title="ready"></a>ready</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">// ready</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>现在filter只在<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### transition</span><br><span class="line"></span><br><span class="line">```css</span><br><span class="line">.fade-enter-active, .fade-leave-active &#123;</span><br><span class="line">  transition: opacity .5s</span><br><span class="line">&#125;</span><br><span class="line">.fade-enter, .fade-leave-active &#123;</span><br><span class="line">  opacity: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue-Router"></a>Vue-Router</h3><h4 id="basic-1"><a href="#basic-1" class="headerlink" title="basic"></a>basic</h4><p><a href="http://router.vuejs.org/zh-cn/index.html" target="_blank" rel="noopener">vue-router 2</a></p><p>添加了全局和离开当前页的钩子，更灵活了</p><h4 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h4><p>​    个人感觉不是很方便，特别是<figure class="highlight plain"><figcaption><span>tag</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### route data</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">beforeRouteEnter (to, from, next) =&gt; &#123;</span><br><span class="line">  next(vm =&gt; &#123;</span><br><span class="line">    // 通过 `vm` 访问组件实例</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><h4 id="basic-2"><a href="#basic-2" class="headerlink" title="basic"></a>basic</h4><p><a href="http://vuex.vuejs.org/en/index.html" target="_blank" rel="noopener">vuex 2.0</a></p><h4 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vuex: &#123;</span><br><span class="line"> -      getters: &#123;</span><br><span class="line"> -        posts: <span class="function"><span class="params">state</span> =&gt;</span> state.posts</span><br><span class="line"> -      &#125;,</span><br><span class="line"> -      actions: &#123;</span><br><span class="line"> -        getPost</span><br><span class="line"> -      &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters, mapActions &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">   computed: &#123;</span><br><span class="line"> +    ...mapGetters([</span><br><span class="line"> +      <span class="string">'posts'</span></span><br><span class="line"> +    ]),</span><br><span class="line">   &#125;</span><br><span class="line">    methods: &#123;</span><br><span class="line"> +    ...mapActions([</span><br><span class="line"> +      <span class="string">'getPost'</span></span><br><span class="line"> +    ]),</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;需要升级的包列表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm i vue@2.0.1 --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm i vue-router@2.0.0 --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm i vuex@2.0.0 --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm i vuex-router-sync@3.0.0 --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm i vuex-loader@9.5.1 --save-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Code" scheme="https://github.com/Cacivy/categories/Code/"/>
    
    
      <category term="JavaScript" scheme="https://github.com/Cacivy/tags/JavaScript/"/>
    
      <category term="Vue" scheme="https://github.com/Cacivy/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Mac实现tree命令</title>
    <link href="https://github.com/Cacivy/2016/07/14/Mac%E5%AE%9E%E7%8E%B0tree%E5%91%BD%E4%BB%A4/"/>
    <id>https://github.com/Cacivy/2016/07/14/Mac实现tree命令/</id>
    <published>2016-07-14T00:00:00.000Z</published>
    <updated>2019-05-04T05:11:14.227Z</updated>
    
    <content type="html"><![CDATA[<p>tree命令可以很方便的展示目录结构，但是macos并不支持，这时我们需要安装这个命令</p><p>首先需要安装homebrew</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><p>然后安装tree</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew npm install tree</span><br></pre></td></tr></table></figure><p>安装完成，试试使用tree命令吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree -L 1</span><br></pre></td></tr></table></figure><a id="more"></a><p>输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── Applications</span><br><span class="line">├── Desktop</span><br><span class="line">├── Documents</span><br><span class="line">├── Downloads</span><br><span class="line">├── Library</span><br><span class="line">├── Movies</span><br><span class="line">├── Music</span><br><span class="line">├── Pictures</span><br><span class="line">└── Public</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tree命令可以很方便的展示目录结构，但是macos并不支持，这时我们需要安装这个命令&lt;/p&gt;
&lt;p&gt;首先需要安装homebrew&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/usr/bin/ruby -e &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后安装tree&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew npm install tree&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装完成，试试使用tree命令吧&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tree -L 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mac OS X 配置 － iTerm2</title>
    <link href="https://github.com/Cacivy/2016/07/13/mac-os-x-%E9%85%8D%E7%BD%AE-%EF%BC%8D-iterm2/"/>
    <id>https://github.com/Cacivy/2016/07/13/mac-os-x-配置-－-iterm2/</id>
    <published>2016-07-13T00:00:00.000Z</published>
    <updated>2019-05-04T05:11:14.227Z</updated>
    
    <content type="html"><![CDATA[<h3 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a><a href="http://www.iterm2.com/" target="_blank" rel="noopener">iTerm2</a></h3><blockquote><pre><code>iTerm2 is a terminal emulator for OS X that does amazing things</code></pre></blockquote><p><img src="/images/iterm2.png" alt></p><a id="more"></a><p>要实现这样的效果，需要进行一些简单的配置</p><h4 id="颜色配置"><a href="#颜色配置" class="headerlink" title="颜色配置"></a>颜色配置</h4><ul><li>首先需要从github上clone一个主题包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/altercation/solarized.git</span><br></pre></td></tr></table></figure><ul><li>然后Import选择该主题包</li></ul><p>Prefernces &gt; Profiles &gt; Color Presets &gt; Import…<br>这里选择刚刚clone下来的项目iterm2-colors-solarized目录<br>然后选择Solarized Dark.itermcolors文件，重新启动iTerm2</p><ul><li>其它一些设置</li></ul><p>重启后iTerm2并没有明显改变，还需要取消以下勾选<br>Prefernces &gt; Text &gt; Draw bold text in bright colors</p><ul><li>透明效果</li></ul><p>先从网上找一张透明背景图片，勾选<br>Prefernces &gt; window &gt;BackBround Image<br>选择透明图片，之后可以调整Blending的值来改变透明度</p><h4 id="bash-gt-zsh"><a href="#bash-gt-zsh" class="headerlink" title="bash &gt; zsh"></a>bash &gt; zsh</h4><p>一行简单的命令久可以将bash切换为zsh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><p>可惜zsh不是很好用，需要配合一些插件/模版，如oh-my-zsh</p><p>下载包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br></pre></td></tr></table></figure><p>替换zshrc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure><p>还可以修改oh-my-zsh主题，.oh-my-zsh/themes目录下有各种主题<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line">ZSH_THEME=<span class="string">"agnoster"</span> <span class="comment"># (this is one of the fancy ones)</span></span><br></pre></td></tr></table></figure></p><p>至此就大功告成了</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;iTerm2&quot;&gt;&lt;a href=&quot;#iTerm2&quot; class=&quot;headerlink&quot; title=&quot;iTerm2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.iterm2.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;iTerm2&lt;/a&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;iTerm2 is a terminal emulator for OS X that does amazing things
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/iterm2.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用Hexo搭建Blog</title>
    <link href="https://github.com/Cacivy/2016/06/13/hexo%E6%90%AD%E5%BB%BA/"/>
    <id>https://github.com/Cacivy/2016/06/13/hexo搭建/</id>
    <published>2016-06-13T00:00:00.000Z</published>
    <updated>2019-05-04T05:11:14.227Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><a id="more"></a><hr><p>好了，以上是hexo默认的文档。</p><p>接下来，简单介绍下如何部署到github pages</p><div class="tip"><br><p>适用于以下版本</p><br><p>hexo: 3.2.0</p><br><p>hexo-cli: 1.0.2</p><br><p>os: Windows_NT 10.0.10586 win32 x64</p><br></div><p>首先要添加SSH KEY，具体可以看<a href="http://jingyan.baidu.com/article/d8072ac47aca0fec95cefd2d.html" target="_blank" rel="noopener">这里</a></p><div class="tip"><br>  注意在Enter passphrase for key这一步时，直接回车即可，如果输入passphrase的话hexo deploy可能会报错<br></div><p>之后配置_config.yml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:Cacivy/Cacivy.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><div class="tip"><br><p>1. tpye后面需要加一个半角空格</p><br><p>2. 3.0版本后type需要从github改为git</p><br></div><p>最后继续按文档来</p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><blockquote><p>SUCCESS</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript高级程序设计</title>
    <link href="https://github.com/Cacivy/2016/01/03/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0%E6%91%98%E6%8A%84/"/>
    <id>https://github.com/Cacivy/2016/01/03/JavaScript高级程序设计笔记摘抄/</id>
    <published>2016-01-03T00:00:00.000Z</published>
    <updated>2019-05-04T05:11:14.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="3-6-6-label语句"><a href="#3-6-6-label语句" class="headerlink" title="3.6.6　label语句"></a>3.6.6　label语句</h3><p>使用label语句可以在代码中添加标签，以便将来使用。以下是label语句的语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">label: statement</span><br></pre></td></tr></table></figure><p>下面是一个示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start: <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">    alert(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子中定义的start标签可以在将来由break或continue语句引用。加标签的语句一般都要与for语句等循环语句配合使用。</p><a id="more"></a><h3 id="3-6-8-with语句"><a href="#3-6-8-with语句" class="headerlink" title="3.6.8　with语句"></a>3.6.8　with语句</h3><p>with语句的作用是将代码的作用域设置到一个特定的对象中。with语句的语法如下：<br>with (expression) statement;<br>定义with语句的目的主要是为了简化多次编写同一个对象的工作，如下面的例子所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> qs = location.search.substring(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hostName = location.hostname;</span><br><span class="line"><span class="keyword">var</span> url = location.href;</span><br></pre></td></tr></table></figure><p>上面几行代码都包含location对象。如果使用with语句，可以把上面的代码改写成如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span>(location)&#123;</span><br><span class="line">    <span class="keyword">var</span> qs = search.substring(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> hostName = hostname;</span><br><span class="line">    <span class="keyword">var</span> url = href;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WithStatementExample01.htm<br>在这个重写后的例子中，使用with语句关联了location对象。这意味着在with语句的代码块内部，每个变量首先被认为是一个局部变量，而如果在局部环境中找不到该变量的定义，就会查询location对象中是否有同名的属性。如果发现了同名属性，则以location对象属性的值作为变量的值。</p><div class="tip"><br> 严格模式下不允许使用with语句，否则将视为语法错误。<br> 由于大量使用with语句会导致性能下降，同时也会给调试代码造成困难，因此在开发大型应用程序时，不建议使用with语句。<br></div><h3 id="5-2-8-迭代方法"><a href="#5-2-8-迭代方法" class="headerlink" title="5.2.8　迭代方法"></a>5.2.8　迭代方法</h3><p>ECMAScript 5为数组定义了5个迭代方法。每个方法都接收两个参数：要在每一项上运行的函数和（可选的）运行该函数的作用域对象——影响this的值。传入这些方法中的函数会接收三个参数：数组项的值、该项在数组中的位置和数组对象本身。根据使用的方法不同，这个函数执行后的返回值可能会也可能不会影响访问的返回值。以下是这5个迭代方法的作用。</p><ul><li>every()：对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true。</li><li>filter()：对数组中的每一项运行给定函数，返回该函数会返回true的项组成的数组。</li><li>forEach()：对数组中的每一项运行给定函数。这个方法没有返回值。</li><li>map()：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。</li><li>some()：对数组中的每一项运行给定函数，如果该函数对任一项返回true，则返回true。</li></ul><div class="tip"><br>以上方法都不会修改数组中的包含的值。<br></div><p>在这些方法中，最相似的是every()和some()，它们都用于查询数组中的项是否满足某个条件。对every()来说，传入的函数必须对每一项都返回true，这个方法才返回true；否则，它就返回false。而some()方法则是只要传入的函数对数组中的某一项返回true，就会返回true。请看以下例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> everyResult = numbers.every(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (item &gt; <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">alert(everyResult);     <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> someResult = numbers.some(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (item &gt; <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">alert(someResult);      <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>以上代码调用了every()和some()，传入的函数只要给定项大于2就会返回true。对于every()，它返回的是false，因为只有部分数组项符合条件。对于some()，结果就是true，因为至少有一项是大于2的。<br>下面再看一看filter()函数，它利用指定的函数确定是否在返回的数组中包含的某一项。例如，要返回一个所有数值都大于2的数组，可以使用以下代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filterResult = numbers.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (item &gt; <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">alert(filterResult);       <span class="comment">//[3,4,5,4,3]</span></span><br></pre></td></tr></table></figure><p>这里，通过调用filter()方法创建并返回了包含3、4、5、4、3的数组，因为传入的函数对它们每一项都返回true。这个方法对查询符合某些条件的所有数组项非常有用。<br>map()也返回一个数组，而这个数组的每一项都是在原始数组中的对应项上运行传入函数的结果。例如，可以给数组中的每一项乘以2，然后返回这些乘积组成的数组，如下所示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mapResult = numbers.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">alert(mapResult);   <span class="comment">//[2,4,6,8,10,8,6,4,2]</span></span><br></pre></td></tr></table></figure><p>以上代码返回的数组中包含给每个数乘以2之后的结果。这个方法适合创建包含的项与另一个数组一一对应的数组。<br>最后一个方法是forEach()，它只是对数组中的每一项运行传入的函数。这个方法没有返回值，本质上与使用for循环迭代数组一样。来看一个例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">numbers.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//执行某些操作</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这些数组方法通过执行不同的操作，可以大大方便处理数组的任务。支持这些迭代方法的浏览器有IE9+、Firefox 2+、Safari 3+、Opera 9.5+和Chrome。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;h3 id=&quot;3-6-6-label语句&quot;&gt;&lt;a href=&quot;#3-6-6-label语句&quot; class=&quot;headerlink&quot; title=&quot;3.6.6　label语句&quot;&gt;&lt;/a&gt;3.6.6　label语句&lt;/h3&gt;&lt;p&gt;使用label语句可以在代码中添加标签，以便将来使用。以下是label语句的语法：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;label: statement&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面是一个示例：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;start: &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; count; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个例子中定义的start标签可以在将来由break或continue语句引用。加标签的语句一般都要与for语句等循环语句配合使用。&lt;/p&gt;
    
    </summary>
    
      <category term="Code" scheme="https://github.com/Cacivy/categories/Code/"/>
    
    
      <category term="JavaScript" scheme="https://github.com/Cacivy/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>关于JS实现Web打印</title>
    <link href="https://github.com/Cacivy/2016/01/01/%E5%85%B3%E4%BA%8EJS%E5%AE%9E%E7%8E%B0Web%E6%89%93%E5%8D%B0/"/>
    <id>https://github.com/Cacivy/2016/01/01/关于JS实现Web打印/</id>
    <published>2016-01-01T00:00:00.000Z</published>
    <updated>2019-05-04T05:11:14.227Z</updated>
    
    <content type="html"><![CDATA[<p>首先Js本身就有调用浏览器打印的方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.print();</span><br></pre></td></tr></table></figure></p><p>以上代码即可实现当前页打印，但是如果我们要打印页面局部内容呢？</p><a id="more"></a><h3 id="html插入标签-JS原生实现"><a href="#html插入标签-JS原生实现" class="headerlink" title="html插入标签+JS原生实现"></a>html插入标签+JS原生实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;打印预览简单实现&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">这是body 里的内容不需要打印，具体的页面设计根据自己的要求自行设计。如果需要一个页面多个tag,可以动态生成tag  </span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;!--startprint--&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;</span></span><br><span class="line"><span class="regexp">这是我需要打印的内容</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;!--endprint--&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">preview</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> bdhtml=<span class="built_in">window</span>.document.body.innerHTML;<span class="comment">//获取当前页的html代码</span></span><br><span class="line"><span class="keyword">var</span> startStr=<span class="string">"&lt;!--startprint--&gt;"</span>;<span class="comment">//设置打印开始区域</span></span><br><span class="line"><span class="keyword">var</span> endStr=<span class="string">"&lt;!--endprint--&gt;"</span>;<span class="comment">//设置打印结束区域</span></span><br><span class="line"><span class="keyword">var</span> printHtml=bdhtml.substring(bdhtml.indexOf(startStr)+startStr.length,bdhtml.indexOf(endStr));<span class="comment">//从标记里获取需要打印的页面</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.document.body.innerHTML=printHtml;<span class="comment">//需要打印的页面</span></span><br><span class="line"><span class="built_in">window</span>.print();</span><br><span class="line"><span class="built_in">window</span>.document.body.innerHTML=bdhtml;<span class="comment">//还原界面</span></span><br><span class="line">&#125;</span><br><span class="line">preview();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>上面的代码很巧妙的实现了局部打印，还可以使用iframe等方法，但是相对比较繁琐。<br>这里jQuery也提供了插件可以实现同样的效果</p><h3 id="jQuery插件实现"><a href="#jQuery插件实现" class="headerlink" title="jQuery插件实现"></a>jQuery插件实现</h3><p>1、下载jquery.PrintArea.js。<br>2、调用jquery.min.js和jquery.PrintArea.js<br>3、调用printArea()方法。<br>也是比较简便的方法。</p><p>好，局部打印已经实现了，如果想要更灵活的展示<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> print &#123;</span><br><span class="line">  <span class="selector-id">#nav-area</span> &#123;<span class="attribute">display</span>: none;&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>可以使用以上代码隐藏响应元素。</p><p>ps:Chrome浏览器存在局部打印预览失败的问题，可以尝试加上以下样式<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.printfix</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先Js本身就有调用浏览器打印的方法&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.print();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以上代码即可实现当前页打印，但是如果我们要打印页面局部内容呢？&lt;/p&gt;
    
    </summary>
    
      <category term="Code" scheme="https://github.com/Cacivy/categories/Code/"/>
    
    
      <category term="JavaScript" scheme="https://github.com/Cacivy/tags/JavaScript/"/>
    
      <category term="Chrome" scheme="https://github.com/Cacivy/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>Singleton</title>
    <link href="https://github.com/Cacivy/2015/01/16/Singleton/"/>
    <id>https://github.com/Cacivy/2015/01/16/Singleton/</id>
    <published>2015-01-16T00:00:00.000Z</published>
    <updated>2019-05-04T05:11:14.227Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p><a href="http://zh.wikipedia.org/wiki/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">Wiki</a></p><blockquote><p>单例模式，也叫单子模式，是一种常用的软件设计模式。在应用这个模式时，单例对象的类必须保证只有一个实例存在。</p></blockquote><h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ol><li>某个类只能有一个实例</li><li>必须自行创建这个实例</li><li>必须自行向整个系统提供这个实例</li></ol><a id="more"></a><h4 id="构建方式"><a href="#构建方式" class="headerlink" title="构建方式"></a>构建方式</h4><ul><li>懒汉方式。指全局的单例实例在第一次被使用时构建。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//volatile:不被线程访问和修改</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton Instance = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">object</span> _lock = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line">    <span class="comment">//私有构造</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line">    <span class="comment">//锁定对象只能被一个线程访问并返回</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Instance == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">lock</span> (_lock)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (Instance == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Instance=<span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上述代码使用了双重锁方式较好地解决了多线程下的单例模式实现。先看内层的if语句块，使用这个语句块时，先进行加锁操作，保证只有一个线程可以访问该语句块，进而保证只创建了一个实例。再看外层的if语句块，这使得每个线程欲获取实例时不必每次都得加锁，因为只有实例为空时（即需要创建一个实例），才需加锁创建，若果已存在一个实例，就直接返回该实例，节省了性能开销。</p></blockquote><ul><li>饿汉方式。指全局的单例实例在类装载时构建。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//实例私有只读对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Singleton Instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="comment">//私有构造</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//返回对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">GetInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> Instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面使用的readonly关键可以跟static一起使用，用于指定该常量是类别级的，它的初始化交由静态构造函数实现，并可以在运行时编译。在这种模式下，无需自己解决线程安全性问题，CLR会给我们解决。由此可以看到这个类被加载时，会自动实例化这个类，而不用在第一次调用GetInstance()后才实例化出唯一的单例对象。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Wiki&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;单例模式，也叫单子模式，是一种常用的软件设计模式。在应用这个模式时，单例对象的类必须保证只有一个实例存在。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;要点&quot;&gt;&lt;a href=&quot;#要点&quot; class=&quot;headerlink&quot; title=&quot;要点&quot;&gt;&lt;/a&gt;要点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;某个类只能有一个实例&lt;/li&gt;
&lt;li&gt;必须自行创建这个实例&lt;/li&gt;
&lt;li&gt;必须自行向整个系统提供这个实例&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Code" scheme="https://github.com/Cacivy/categories/Code/"/>
    
    
      <category term="C#" scheme="https://github.com/Cacivy/tags/C/"/>
    
      <category term="Design Patterns" scheme="https://github.com/Cacivy/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>QuickSort</title>
    <link href="https://github.com/Cacivy/2015/01/16/QuickSort/"/>
    <id>https://github.com/Cacivy/2015/01/16/QuickSort/</id>
    <published>2015-01-16T00:00:00.000Z</published>
    <updated>2019-05-04T05:11:14.227Z</updated>
    
    <content type="html"><![CDATA[<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p><a href="http://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">Wiki</a></p><blockquote><p>快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要Ο(n log n)次比较。在最坏状况下则需要Ο(n2)次比较，但这种状况并不常见。事实上，快速排序通常明显比其他Ο(n log n) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。</p></blockquote><ul><li>算法</li></ul><blockquote><p>快速排序使用分治法（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。<br>步骤为：</p></blockquote><ol><li><p>从数列中挑出一个元素，称为 “基准”（pivot）</p></li><li><p>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</p></li><li><p>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</p></li></ol><a id="more"></a><ul><li>Code</li></ul><hr><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">QuickSort</span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//声明数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr=&#123;<span class="number">2</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="comment">//调用排序方法</span></span><br><span class="line">        Sort(arr,<span class="number">0</span>,arr.Lenthg<span class="number">-1</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 快速排序</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="arr"&gt;</span>数组<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Sort</span>(<span class="params"><span class="keyword">int</span>[] arr,<span class="keyword">int</span> low,<span class="keyword">int</span> high</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//获取数组中间数</span></span><br><span class="line">        <span class="keyword">int</span> middle = arr[(low+high)/<span class="number">2</span>];</span><br><span class="line">        <span class="comment">//赋值</span></span><br><span class="line">        <span class="keyword">int</span> i = low, j= high;</span><br><span class="line">        <span class="comment">//输出i,j,middle</span></span><br><span class="line">        Console.WriteLine(i + <span class="string">"\t"</span> + j+<span class="string">"\t"</span>+middle);</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (arr[i] &lt; middle&amp;&amp;i&lt;high) i++;</span><br><span class="line">            <span class="keyword">while</span> (arr[j] &gt; middle&amp;&amp;j&gt;low) j--;</span><br><span class="line">            <span class="keyword">if</span> (i &lt;= j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">                arr[i] = arr[j];</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">                i++;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出数组</span></span><br><span class="line">        Console.WriteLine(<span class="keyword">string</span>.Join(<span class="string">","</span>, arr));</span><br><span class="line">        <span class="comment">//尾递归</span></span><br><span class="line">        <span class="keyword">if</span>(j&gt;low) Sort(arr,low,j);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;high) Sort(arr, i, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;快速排序&quot;&gt;&lt;a href=&quot;#快速排序&quot; class=&quot;headerlink&quot; title=&quot;快速排序&quot;&gt;&lt;/a&gt;快速排序&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Wiki&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要Ο(n log n)次比较。在最坏状况下则需要Ο(n2)次比较，但这种状况并不常见。事实上，快速排序通常明显比其他Ο(n log n) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;算法&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;快速排序使用分治法（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。&lt;br&gt;步骤为：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;从数列中挑出一个元素，称为 “基准”（pivot）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Code" scheme="https://github.com/Cacivy/categories/Code/"/>
    
    
      <category term="Algorithm" scheme="https://github.com/Cacivy/tags/Algorithm/"/>
    
      <category term="C#" scheme="https://github.com/Cacivy/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>BitMap</title>
    <link href="https://github.com/Cacivy/2015/01/10/BitMap/"/>
    <id>https://github.com/Cacivy/2015/01/10/BitMap/</id>
    <published>2015-01-10T00:00:00.000Z</published>
    <updated>2019-05-04T05:11:14.226Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来自于《编程珠玑》。所谓的Bit-map就是用一个bit位来标记某个元素对应的Value， 而Key即是该元素。由于采用了Bit为单位来存储数据，因此在存储空间方面，可以大大节省。</p></blockquote><p>如果说了这么多还没明白什么是Bit-map，那么我们来看一个具体的例子，假设我们要对0-7内的5个元素(4,7,2,5,3)排序（这里假设这些元素没有重复）。那么我们就可以采用Bit-map的方法来达到排序的目的。要表示8个数，我们就只需要8个Bit（1Bytes），首先我们开辟1Byte的空间，将这些空间的所有Bit位都置为0</p><p>然后遍历这5个元素，首先第一个元素是4，那么就把4对应的位置为1（可以这样操作 <code>p+(i/8)|(0×01&lt;&lt;(i%8)</code>)当然了这里的操作涉及到Big-ending和Little-ending的情况，这里默认为Big-ending）,因为是从零开始的，所以要把第五位置为1</p><p>然后再处理第二个元素7，将第八位置为1,，接着再处理第三个元素，一直到最后处理完所有的元素，将相应的位置为1。</p><p>然后我们现在遍历一遍Bit区域，将该位是一的位的编号输出（2，3，4，5，7），这样就达到了排序的目的。</p><p>其实就是把计数排序用的统计数组的每个单位缩小成bit级别的布尔数组</p><a id="more"></a><ul><li>二分法(JAVA)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binary</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> high = array.length - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(low &lt;= high)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> middle = (low + high) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(value == array[middle])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(value &gt; array[middle])</span><br><span class="line">&#123;</span><br><span class="line">low = middle + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(value &lt; array[middle])</span><br><span class="line">&#123;</span><br><span class="line">high = middle - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> value = binary(a, <span class="number">9</span>);</span><br><span class="line">System.out.println(value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;来自于《编程珠玑》。所谓的Bit-map就是用一个bit位来标记某个元素对应的Value， 而Key即是该元素。由于采用了Bit为单位来存储数据，因此在存储空间方面，可以大大节省。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果说了这么多还没明白什么是Bit-map，那么我们来看一个具体的例子，假设我们要对0-7内的5个元素(4,7,2,5,3)排序（这里假设这些元素没有重复）。那么我们就可以采用Bit-map的方法来达到排序的目的。要表示8个数，我们就只需要8个Bit（1Bytes），首先我们开辟1Byte的空间，将这些空间的所有Bit位都置为0&lt;/p&gt;
&lt;p&gt;然后遍历这5个元素，首先第一个元素是4，那么就把4对应的位置为1（可以这样操作 &lt;code&gt;p+(i/8)|(0×01&amp;lt;&amp;lt;(i%8)&lt;/code&gt;)当然了这里的操作涉及到Big-ending和Little-ending的情况，这里默认为Big-ending）,因为是从零开始的，所以要把第五位置为1&lt;/p&gt;
&lt;p&gt;然后再处理第二个元素7，将第八位置为1,，接着再处理第三个元素，一直到最后处理完所有的元素，将相应的位置为1。&lt;/p&gt;
&lt;p&gt;然后我们现在遍历一遍Bit区域，将该位是一的位的编号输出（2，3，4，5，7），这样就达到了排序的目的。&lt;/p&gt;
&lt;p&gt;其实就是把计数排序用的统计数组的每个单位缩小成bit级别的布尔数组&lt;/p&gt;
    
    </summary>
    
      <category term="Code" scheme="https://github.com/Cacivy/categories/Code/"/>
    
    
      <category term="Algorithm" scheme="https://github.com/Cacivy/tags/Algorithm/"/>
    
      <category term="Java" scheme="https://github.com/Cacivy/tags/Java/"/>
    
  </entry>
  
</feed>
